{"name":"Iterators.js","tagline":"Useful functional iterators. Inspired by Iterators.jl","body":"# iterators.js\r\n\r\nUseful functional iterators. \r\n\r\nInspired by [JuliaLang/Iterators.jl](https://github.com/JuliaLang/Iterators.jl). \r\n\r\n[![npm ver](https://img.shields.io/npm/v/iterators.js.svg)](https://www.npmjs.com/package/iterators.js) [![bower logo](https://img.shields.io/bower/v/iterators.js.svg)](http://bower.io/search/?q=iterators.js)  [![downloads total](https://img.shields.io/npm/dt/iterators.js.svg)](https://www.npmjs.com/package/iterators.js) [![travis ci](https://img.shields.io/travis/nishanths/iterators.js.svg)](https://travis-ci.org/nishanths/iterators.js)  [![license](https://img.shields.io/npm/l/iterators.js.svg)](https://github.com/nishanths/iterators.js/blob/master/LICENSE)\r\n\r\niterators.js is designed to be performant and to iterate as lazily as possible in most scenarios. It has no dependencies. Tests are available in the [`test/`](https://github.com/nishanths/iterators.js/tree/master/test) directory. Run `npm test` or `mocha` to execute tests.\r\n\r\nIt is available on [npm](https://www.npmjs.com/package/iterators.js), [bower](http://bower.io/search/?q=iterators.js), and directly via [RawGit](https://rawgit.com/nishanths/iterators.js/master/iterators.js). \r\n\r\n**Warning:** iterators.js requires some ES6 features such as [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set).\r\n\r\n# Contents\r\n\r\n* [Install](#install)\r\n* [Usage](#usage)\r\n* [Examples](#examples)\r\n* [Functions](#functions)\r\n* [Contributing](#contributing)\r\n* [License](#license)\r\n\r\n# Install\r\n\r\nIf you're using npm, simply add it to your project (and package.json) by running:\r\n\r\n````bash\r\n$ npm install --save iterators.js\r\n````\r\n\r\nIf you're using bower, run:\r\n\r\n````bash\r\n$ bower install iterators.js\r\n```` \r\n\r\nDirect link for browsers, minified:\r\n\r\n````html\r\n<script type=\"text/javascript\" src=\"https://rawgit.com/nishanths/iterators.js/master/iterators.min.js\"></script>\r\n````\r\n\r\n# Usage\r\n\r\niterators.js works well both in node and the browser.\r\n\r\n#### Node\r\n\r\nRequire 'iterators.js' in your JS file:\r\n\r\n````js\r\n// index.js\r\n\r\nvar itr = require('iterators.js');\r\nitr.distinct([1, 2, 1, 2, 3], function(item) {\r\n  console.log(item);\r\n});\r\n````\r\n\r\nBack at the terminal:\r\n\r\n````bash\r\n$ node index.js\r\n1\r\n2\r\n3\r\n````\r\n\r\n#### Browser\r\n\r\nLoad it in your browser. Set the `src` for iterators.js to either a local copy (you can get it from bower) or to the online copy on GitHub (served via RawGit).\r\n\r\n````html\r\n<!-- index.html -->\r\n\r\n<html>\r\n<head>\r\n  <title>Example</title>\r\n</head>\r\n<body>\r\n  Hello, world\r\n  <script type=\"text/javascript\" src=\"https://rawgit.com/nishanths/iterators.js/master/iterators.min.js\"></script>\r\n  <script type=\"text/javascript\" src=\"./main.js\"></script>\r\n</body>\r\n</html>\r\n````\r\n\r\nUse the `itr` global to access functions.\r\n\r\n````js\r\n// main.js\r\n\r\nconsole.log(itr); // Object {} \r\n\r\nitr.distinct([1, 2, 1, 2, 3], function(item) {\r\n  console.log(item);\r\n});\r\n\r\n// 1\r\n// 2\r\n// 3\r\n````\r\n\r\n**Note on global variable conflicts:** The previous `itr` variable can be retrieved by running `itr.noConflict()`. The function resets the `itr` variable back to its original value and returns a reference to the iterators.js's itr object which you can assign to the variable of your choosing.\r\n\r\n````js\r\nvar myItr = itr.noConflict(); \r\n// Previous itr is now restored\r\n// myItr can be used to access iterator.js's library functions\r\n````\r\n\r\n# Examples\r\n\r\n* **count()** – iterate from start to end (excluded) using the specified step\r\n\r\n````js\r\nvar start = 10;\r\nvar end = 20;\r\nvar step = 5;\r\n\r\nitr.count(start, end, step, function(item) {\r\n    console.log(item);\r\n});\r\n\r\n// 10\r\n// 12\r\n// 14\r\n// 16\r\n// 18\r\n````\r\n\r\n* **cycle()** – cycle over the elements of an array\r\n\r\n````js\r\nitr.cycle([1,2,3], 5, function(item) {\r\n    console.log(item);\r\n});\r\n\r\n// 1\r\n// 2\r\n// 3\r\n// 1\r\n// 2\r\n````\r\n\r\n* **distinct()** – iterate only over unencountered elements\r\n\r\n````js\r\nitr.distinct([1,1,2,3], function(item) {\r\n    console.log(item);\r\n});\r\n\r\n// 1\r\n// 2\r\n// 3\r\n````\r\n\r\n* **cartesianProduct()** - iterate cartesian product pairs\r\n\r\n````js\r\nitr.cartesianProduct([1,2], [3,4], function(pair) {\r\n    console.log(pair[0] * pair[1]);\r\n});\r\n\r\n// 3\r\n// 4\r\n// 6\r\n// 8\r\n````\r\n\r\n* **groupBy()** – group elements into arrays depending on the result from applying the specified function\r\n\r\n````js\r\nvar firstCharNormalizedCase = function(str) { return str.charAt(0).toLowerCase(); };\r\nvar arr = itr.groupBy(['abc', 'gooey', 'foo', 'Gui'], firstCharNormalizedCase);\r\n\r\nconsole.log(arr); // [ [ 'abc' ], [ 'gooey', 'Gui' ], [ 'foo' ] ]\r\n````\r\n\r\n* **imap()** – applies a function to each element in the arrays and returns an array of results\r\n\r\n````js\r\nvar self = null;\r\nvar sum = function(a,b,c) {\r\n  return a + b + c;\r\n};\r\n\r\nvar arr = itr.imap(sum, self, [2,3,8], [0,4,6], [1,3,10]);\r\n\r\nconsole.log(arr); // [3,10,24]\r\n````\r\n\r\n* **iterate()** – successively applies a function to the value and returns an array of result\r\n\r\n````js\r\nvar x = 2;\r\nvar numTimes = 3;\r\n\r\nvar arr = itr.iterate(x, numTimes, function(value) {\r\n    return value * 10;\r\n});\r\n\r\nconsole.log(arr); // [2,20,200]\r\n````\r\n\r\n* **slices()** – iterate over slices each of size n; if the array does not slice \"evenly\", the last slice will have fewer elements\r\n\r\n````js\r\nitr.slices([1,2,3,4,5], 2, function(slice) {\r\n    console.log(slice);\r\n});\r\n\r\n// [1,2]\r\n// [3,4]\r\n// [5]\r\n````\r\n\r\n* **subsets()** – iterate subsets (optionally specify a size, defaults to subsets of all sizes when null)\r\n\r\n````js\r\nvar arr = [];\r\nvar context = null;\r\nvar size = null;\r\n\r\nitr.subsets([1,2,3], function(e) {\r\n    arr.push(e)\r\n}, context, size);\r\n\r\narr.sort(function(a,b) {\r\n    return a.length - b.length;\r\n});\r\n\r\nconsole.log(arr); // [[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]\r\n````\r\n\r\n* **takeNth()** – iterate over every nth element\r\n\r\n````js\r\nitr.takeNth([1,2,3,4,5], 2, function(item) {\r\n    console.log(item);\r\n});\r\n\r\n// 2\r\n// 4\r\n````\r\n\r\n* **takeStrict()** – take n elements only if at least n elements exists, oherwise throw an Error\r\n\r\n````js\r\nvar reversed = true;\r\nvar arr = itr.takeStrict([1,2,3,4,5,6,10], 5, reversed);\r\nconsole.log(arr); // [3,4,5,6,10]\r\n````\r\n        \r\n* **times()** – repeatedly call a function; call infinitely if the number of times is omitted\r\n\r\n````js\r\nvar arr = [];\r\nvar idxs = [];\r\n\r\nitr.times(5, function(idx) {\r\n    arr.push(42);\r\n    idxs.push(idx);\r\n});\r\n\r\nconsole.log(arr); // [42,42,42,42,42]\r\nconsole.log(idxs); // [0,1,2,3,4]\r\n````\r\n\r\n# Functions\r\n\r\n* count\r\n* cycle\r\n* distinct\r\n* cartesianProduct\r\n* groupBy\r\n* imap\r\n* iterate\r\n* slices\r\n* subsets\r\n* takeNth\r\n* takeStrict\r\n* times\r\n\r\n# General notes\r\n\r\n* The [`test/`](https://github.com/nishanths/iterators.js/tree/master/test) directory is a great place for in-depth examples.\r\n* Functions also provide the option to specify a context (`this` value) for your callback function.\r\n\r\n# Contributing\r\n\r\nPull requests are welcome!\r\n\r\n1. Fork the repository\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request on GitHub\r\n\r\n# License\r\n\r\n[MIT](https://github.com/nishanths/iterators.js/blob/master/LICENSE).\r\n","google":"UA-61427501-3","note":"Don't delete this file! It's used internally to help with page regeneration."}