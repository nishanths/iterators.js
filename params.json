{"name":"Iterators.js","tagline":"Useful functional iterators. Inspired by Iterators.jl","body":"# [iterators.js]()\r\n\r\nUseful functional iterators. \r\n\r\nInspired by [JuliaLang/Iterators.jl](https://github.com/JuliaLang/Iterators.jl). \r\n\r\n[![npm ver](https://img.shields.io/npm/v/iterators.js.svg)](https://www.npmjs.com/package/iterators.js) [![downloads total](https://img.shields.io/npm/dm/iterators.js.svg)](https://www.npmjs.com/package/iterators.js) [![downloads total](https://img.shields.io/npm/dt/iterators.js.svg)](https://www.npmjs.com/package/iterators.js)  [![travis ci](https://img.shields.io/travis/nishanths/iterators.js.svg)](https://travis-ci.org/nishanths/iterators.js)  [![license](https://img.shields.io/npm/l/iterators.js.svg)](https://github.com/nishanths/iterators.js/blob/master/LICENSE)\r\n\r\niterators.js is designed to be performant and to iterate as lazily as possible in most scenarios. It has no dependencies. Tests are available in the `test/` directory. Run `npm test` or `mocha` to execute tests.\r\n\r\n**Warning:** iterators.js requires some ES6 features such as [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set).\r\n\r\n# Contents\r\n\r\n* [Install](#install)\r\n* [Usage](#usage)\r\n* [Examples](#examples)\r\n* [Functions](#functions)\r\n* [Contributing](#contributing)\r\n* [License](#license)\r\n\r\n# Install\r\n\r\niterators.js is available on [npm](https://www.npmjs.com/package/iterators.js). Installing is simple. Simply add it to your project (and package.json) by running:\r\n\r\n````bash\r\n$ npm install --save iterators.js\r\n````\r\n\r\nTo install globally, run: (you may need to use sudo)\r\n\r\n````bash\r\n$ npm install -g iterators.js\r\n````\r\n\r\nAlternatively, grab a [zip file](https://github.com/nishanths/iterators.js/archive/master.zip) of the repository.\r\n\r\n# Usage\r\n\r\nIn your JavaScript, `require` iterators.js.\r\n\r\n````js\r\n// index.js\r\n\r\nvar itr = require('iterators.js');\r\n\r\nitr.distinct([1, 2, 1, 2, 3], function(item) {\r\n  console.log(item);\r\n});\r\n\r\n````\r\n\r\nBack at the terminal:\r\n\r\n````bash\r\n$ node index.js\r\n1\r\n2\r\n3\r\n````\r\n\r\n# Examples\r\n\r\nThe [`test/`](https://github.com/nishanths/iterators.js/tree/master/test) directory is a great place for in-depth examples.\r\n\r\n* **cycle()** – cycle over the elements of an array\r\n\r\n````js\r\nitr.cycle([1,2,3], 5, function(item) {\r\n    console.log(item)\r\n});\r\n\r\n// 1\r\n// 2\r\n// 3\r\n// 1\r\n// 2\r\n````\r\n\r\n* **distinct()** – iterate only over unencountered elements\r\n\r\n````js\r\nitr.distinct([1,1,2,3], function(item) {\r\n    console.log(item);\r\n});\r\n\r\n// 1\r\n// 2\r\n// 3\r\n````\r\n\r\n* **cartesianProduct()** - iterate cartesian product pairs\r\n\r\n````js\r\nitr.cartesianProduct([1,2], [3,4], function(a, b) {\r\n    console.log(a * b);\r\n});\r\n\r\n// 3\r\n// 4\r\n// 6\r\n// 8\r\n````\r\n\r\n* **groupBy()** – group elements into arrays depending on the result from applying the specified function\r\n\r\n````js\r\nvar firstCharNormalizedCase = function(str) { return str.charAt(0).toLowerCase(); };\r\nvar arr = itr.groupBy(['abc', 'gooey', 'foo', 'Gui'], firstCharNormalizedCase);\r\n\r\nconsole.log(arr); // [ [ 'abc' ], [ 'gooey', 'Gui' ], [ 'foo' ] ]\r\n````\r\n\r\n* **slices()** – iterate over slices each of size n; if the array does not slice \"evenly\", the last slice will have fewer elements\r\n\r\n````js\r\nitr.slices([1,2,3,4,5], 2, function(slice) {\r\n    console.log(slice);\r\n});\r\n\r\n// [1,2]\r\n// [3,4]\r\n// [5]\r\n````\r\n\r\n* **subsets()** – iterate subsets (optionally specify a size, defaults to subsets of all sizes when null)\r\n\r\n````js\r\nvar arr = [];\r\nvar context = null;\r\nvar size = null;\r\n\r\nitr.subsets([1,2,3], function(e) {\r\n    arr.push(e)\r\n}, context, size);\r\n\r\narr.sort(function(a,b) {\r\n    return a.length - b.length;\r\n});\r\n\r\nconsole.log(arr); // [[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]\r\n````\r\n\r\n* **takeNth()** – iterate over every nth element\r\n\r\n````js\r\nitr.takeNth([1,2,3,4,5], 2, function(item) {\r\n    console.log(item);\r\n});\r\n\r\n// 2\r\n// 4\r\n````\r\n\r\n* **takeStrict()** – take n elements only if at least n elements exists, oherwise throw an Error.\r\n\r\n````js\r\nvar reversed = true;\r\nvar arr = itr.takeStrict([1,2,3,4,5,6,10], 5, reversed);\r\nconsole.log(arr); // [3,4,5,6,10]\r\n````\r\n        \r\n* **times()** – repeatedly call a function\r\n\r\n````js\r\nvar arr = [];\r\nvar idxs = [];\r\n\r\nitr.times(5, function(idx) {\r\n    arr.push(42);\r\n    idxs.push(idx);\r\n});\r\n\r\nconsole.log(arr); // [42,42,42,42,42]\r\nconsole.log(idxs); // [0,1,2,3,4]\r\n````\r\n\r\n# Functions\r\n\r\n* cycle\r\n* distinct\r\n* cartesianProduct\r\n* groupBy\r\n* slices\r\n* subsets\r\n* takeNth\r\n* takeStrict\r\n* times\r\n\r\n# Contributing\r\n\r\nPull requests are welcome!\r\n\r\n1. Fork the repository\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request on GitHub\r\n\r\n# License\r\n\r\n[MIT](https://github.com/nishanths/iterators.js/blob/master/LICENSE).\r\n","google":"UA-61427501-3","note":"Don't delete this file! It's used internally to help with page regeneration."}